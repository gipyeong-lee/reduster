[{"/Users/gipyeong/Documents/101_private/reduster/webapp/src/index.js":"1","/Users/gipyeong/Documents/101_private/reduster/webapp/src/App.js":"2","/Users/gipyeong/Documents/101_private/reduster/webapp/src/reportWebVitals.js":"3","/Users/gipyeong/Documents/101_private/reduster/webapp/src/components/NodeChart.js":"4"},{"size":541,"mtime":1611910320517,"results":"5","hashOfConfig":"6"},{"size":6361,"mtime":1612026380594,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611885064594,"results":"8","hashOfConfig":"6"},{"size":2849,"mtime":1612026374994,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15mcue4",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gipyeong/Documents/101_private/reduster/webapp/src/index.js",[],"/Users/gipyeong/Documents/101_private/reduster/webapp/src/App.js",["19"],"import './App.css';\nimport {memo, useEffect, useState} from \"react\";\nimport {Container,Label, Form, Grid} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport NodeChart from \"./components/NodeChart\";\nexport const colors = [\n    'red',\n    'orange',\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n    'grey',\n    'black',\n]\nfunction App() {\n    const [state, setState] = useState({\n        buckets: [], items: [], counter: {}, isInit: false\n    })\n\n    const [server, setServer] = useState({host: '127.0.0.1', port: '6379'})\n    const [data, setData] = useState({})\n    const {buckets, counter, isInit} = state\n\n    useEffect(() => {\n        if (isInit === false) {\n            loadBuckets(state, setState)\n        }\n    }, [isInit])\n\n    function handleAddServer() {\n        addServer(server, state, setState)\n    }\n\n    function handleRemoveServer() {\n        removeServer(server, state, setState)\n    }\n\n    function inputChange(event) {\n        setServer({...server, ...{[event.target.name]: event.target.value}})\n    }\n\n    function inputChangeData(event) {\n        setData({...data, ...{[event.target.name]: event.target.value}})\n    }\n\n    function handleAddData() {\n        addData(data, state, setState)\n    }\n    const uniqueBucket = [...new Set(buckets.map((bucket)=>bucket.info))]\n    return (\n        <Container textAlign={'center'}>\n            <Grid centered>\n                <Grid.Row columns={12}>\n                    <Grid.Column width={12}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Input\n                                    onChange={(event) => {\n                                        inputChange(event)\n                                    }}\n                                    name={'host'}\n                                    placeholder='127.0.0.1'\n                                    defaultValue={server.host}\n                                />\n                                <Form.Input\n                                    onChange={(event) => {\n                                        inputChange(event)\n                                    }}\n                                    name={'port'}\n                                    placeholder='6379'\n                                    defaultValue={server.port}\n                                />\n                                <Form.Button content={'Add'} onClick={handleAddServer}/>\n                                <Form.Button content={'remove'} color={'red'} onClick={handleRemoveServer}/>\n\n                            </Form.Group>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Input\n                                    onChange={(event) => {\n                                        inputChangeData(event)\n                                    }}\n                                    name={'key'}\n                                    placeholder='key'\n                                    defaultValue={data.key}\n                                />\n                                <Form.Input\n                                    onChange={(event) => {\n                                        inputChangeData(event)\n                                    }}\n                                    name={'value'}\n                                    placeholder='value'\n                                    defaultValue={data.value}\n                                />\n                                <Form.Button content={'Add'} onClick={handleAddData}/>\n                            </Form.Group>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={12}>\n                    <Grid.Column width={12}>\n                        {uniqueBucket.map((info,idx)=>{\n                            return <Label color={colors[idx]}>\n                                {info}\n                            </Label>\n                        })}\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={12}>\n                    <Grid.Column width={12} textAlign={'center'}>\n                        {buckets.length > 0 ? <NodeChart buckets={buckets} counter={counter}/>\n                            : ''}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container>\n    );\n}\n\nasync function loadBuckets(state, setState) {\n    const bucketResponse = await axios.get(\"http://localhost:8080/api/v1/redis/server/info/all\")\n    const itemResponse = await axios.get(\"http://localhost:8080/api/v1/redis/keys/info/all\")\n    const counter = makeCounter(itemResponse.data.keys)\n    const uniqueBucket = [...new Set(bucketResponse.data.buckets.map((bucket)=>bucket.info))]\n    setState({\n        ...state, ...{\n            buckets: bucketResponse.data.buckets.map((bucket) => {\n                const colorIndex = uniqueBucket.indexOf(bucket.info)\n                bucket.color = colors[colorIndex]\n                return bucket\n            }),\n            items: itemResponse.data.keys,\n            counter: counter,\n            isInit: true\n        }\n    })\n    setTimeout(()=>{\n        loadBuckets(state, setState)\n    },5000)\n}\n\nfunction makeCounter(items) {\n    const nextCounter = {}\n    items.forEach((item) => {\n        if (!nextCounter[`${item.serverKey}`]) {\n            nextCounter[`${item.serverKey}`] = 1\n        } else {\n            nextCounter[`${item.serverKey}`] += 1\n        }\n    })\n\n    return nextCounter\n}\n\nfunction addData(data, state, setState) {\n    axios.put(`http://localhost:8080/api/v1/redis/cmd/set/${encodeURI(data.key)}/${encodeURI(data.value)}`).then(() => {\n        setState({...state, ...{isInit: false}})\n    })\n}\n\nfunction addServer(server, state, setState) {\n    axios.post(\"http://localhost:8080/api/v1/redis/server\", server).then(() => {\n        setState({...state, ...{isInit: false}})\n    })\n}\n\nfunction removeServer(server, state, setState) {\n    axios.delete(\"http://localhost:8080/api/v1/redis/server\", {data: server}).then(() => {\n        setState({...state, ...{isInit: false}})\n    })\n}\n\nexport default memo(App);\n","/Users/gipyeong/Documents/101_private/reduster/webapp/src/reportWebVitals.js",[],"/Users/gipyeong/Documents/101_private/reduster/webapp/src/components/NodeChart.js",[],{"ruleId":"20","severity":1,"message":"21","line":33,"column":8,"nodeType":"22","endLine":33,"endColumn":16,"suggestions":"23"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","ArrayExpression",["24"],{"desc":"25","fix":"26"},"Update the dependencies array to be: [isInit, state]",{"range":"27","text":"28"},[786,794],"[isInit, state]"]